// Test memory operations

// This is free and unencumbered software released into the public domain.
// See ../LICENSE.unlicense

module memory;

struct cons { w ptr };

import Builtin.print (ptr - );
import Builtin.int_to_string (w - ptr);
import Builtin.concat_string (ptr ptr - ptr);

proc print_int_nl(w -) {
    call Builtin.int_to_string
    get_env load main_s 1:ptr drop
    call Builtin.concat_string
    call Builtin.print
    ret
};

proc make_list(w - ptr) {
    block entry_ {
        dup 0 eq cjmp base jmp rec
    }
    block base {
        drop 0 ze:w:ptr ret
    }
    block rec {
        dup
        1 sub call make_list
        alloc cons
        // On the stack are: word1 word2 ptr, store returns the ptr so we
        // can chain these.
        store cons 2:ptr
        store cons 1:ptr
        ret
    }
};

proc sum_list(w ptr - w) {
    block entry_ {
        dup 0 ze:w:ptr eq cjmp base jmp rec
    }
    block base {
        drop ret
    }
    block rec {
        // acc0 ptr0
        load cons 1:ptr
        // acc0 val ptr0
        swap roll 3 add swap
        // acc ptr0
        load cons 2:ptr
        drop
        // acc ptr
        tcall sum_list
    }
};

proc mul_list(ptr - w) {
    block entry_ {
        dup 0 ze:w:ptr eq cjmp base jmp rec
    }
    block base {
        drop ret
    }
    block rec {
        // acc0 ptr0
        load cons 1:ptr
        // acc0 ptr0 val
        swap roll 3 mul swap
        // acc ptr0
        load cons 2:ptr
        drop
        // acc ptr
        tcall mul_list
    }
};

proc main_p (- w) {
    5 call make_list
    dup 0 swap call sum_list call print_int_nl
    1 swap call mul_list call print_int_nl

    0 ret
};

data nl_string = array(w8) { 10 0 };
struct main_s { ptr };
data main_d = main_s { nl_string };
closure main = main_p main_d;
entry main;

