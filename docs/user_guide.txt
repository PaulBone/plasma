Plasma User's Guide
===================
:Author: Paul Bone
:Email: paul@plasmalang.org
:Date: March 2021
:Copyright: Copyright (C) 2021 Plasma Team
:License: CC BY-SA 4.0
:toc:

The user's guide describes how to use the Plasma tools to work with your
programs.

== Organising your program

Plasma programs are made up of modules.  Each module corresponds to a file
and also (in our implementation) a compilation unit.
When someone says "Plasma module" or "Plasma file" you can assume they mean
the same thing.

=== Filenames

A Plasma file ends with the extension `.p` and the filename must correspond
to the module name.
Files are checked for modules by ignoring case and the hyphen (`-`) and
underscore (`_`) symbols.

In other words, `my_module.p`, `my-module.p`, `mymodule.p`, `MyModule.p` and
`My_-_Mo-Du-Le.p` are all legal file names for `MyModule`.
Likewise the file `my_module.p` could contain any of `MyModule`,
`my_module`, `mY_MoD_ule` etc.
While `my_file.p` does not match `my_module`.
The exception is that `-` is not legal in module names since in Plasma code
it represents subtraction.

[NOTE]
.Why does Plasma match filenames loosely?
====
Some file systems are case sensitive and others are case insensitive, in
different ways (storing filenames with case but matching them
insensitively).
Meanwhile not all writing systems have a concept of case.
Rather than make separate rules for different situations so that we can
support different file systems and writing systems; it is simpler
to avoid making case meaningful.
====

By convention module names should be in `UpperCase` and their filenames in
`snake_case`.  These give the best clarity in code and the most
compatibility on filesystems.

=== Programs

A plasma program must have at least one module and a `BUILD.plz` file to
describe what's required to build it.
The `BUILD.plz` file is a https://toml.io/en/[TOML]-ish
file containing one or more TOML tables.
For example:

----
[hello]
type = program
modules = [ Hello ]
----

Line one gives the name of the program (as the name of the TOML table).
This is the name of the bytecode object that will be produced by `plzbuild`.
The table has two keys, `type` and `modules`.
The `type` key must be set to the string `program` or Plasma will not
recognise it as a program.
The `modules` key lists the modules that make up the program.  It is an
error to import (in source code) a module that's not listed here.

[NOTE]
.Why does Plasma require this?
====
This gives you one place where you can get an idea of how big and complex
your program is,
which becomes harder to tell if there are many programs sharing the same
directory.
====

The following example shows a program with multiple modules:

----
[my_example]
type = program
modules = [ ModuleExample, ModuleToImport ]
----

Future work:

 * link:https://github.com/PlasmaLang/plasma/issues/345[Bug 345 - Don't
   require a BUILD.plz for single-module programs]
 * link:https://github.com/PlasmaLang/plasma/issues/344[Bug 344 - Real TOML
   support]

=== Program entrypoints

Programs must have exactly one entrypoint.  This is specified in the source
code by placing the `entrypoint` keyword in front of a function definition.

----
entrypoint
func hello() uses IO -> Int {
     ...
     return 0
}
----

The chosen function must take zero arguments and return an integer.
Following UNIX convention returning 0 from this function means the program
ran successfully and any other value means it failed.

The entrypoint function's name is irrelevant.  There is no need to name your
function `main` or `WinMain`.

It is syntactically possible to put the entrypoint specifier in front of
multiple functions.
In the future the linker will be able to choose the actual entrypoint from
these candidates, but for now this is unsupported.

Future work:

 * https://github.com/PlasmaLang/plasma/issues/283[#283 - Support command
   line arguments in entrypoints]
 * https://github.com/PlasmaLang/plasma/issues/346[#346 - Specify entrypoint
   in `BUILD.plz`]

== Building programs

== Running programs

// vim: set syntax=asciidoc:
